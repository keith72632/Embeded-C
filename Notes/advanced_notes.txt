Thread Mode and Handler mode

What is thread mode?


Reset Handlers:
  -processor always starts in thread mode
  -generate interrupt by setting certain bits at IRQ register
  -code:
    void generate_interrupt()
{
  uint32_t *pSTIR = (uint32_t*)0xE000EF00;
  uint32_t *pISER0 = (uint32_t*)0xE000E100;

  //enable IRQ3 interrupt
  *pISER0 |= (1<<3);
  //generate an interrupt from softwarre
  //*pSTIR = (3 & 0x1FF);
}

What is handler mode?
  -handler mode is the mode that exception(interrupts) are handled in

How Do Thread Mode and Handler mode work together?
  Short answer is they have their own code region, RAM region and stack.

How to debug wether function is in thread or handler mode
  IPSR (Interrupt Program Status Register) has a bit field called ISR_NUMBER[8:0]
    -0=thread mode
    -1=reserved
    -2=NMI
    -3=Hard Fault
    -4=mem manage and so on
TDLR switching between thread and handler mode by triggering system exception, with handler mode always being privleged.

Access Levels of Prcessor
  a)Privileged
  b)Non-Privilege
  -Self explanitory, Certain registers are only accessed with full privilege PAL
  -By default, runs in PAL
  -In thread mode, once you move out of PAL, you cannot come back unless enter into handler mode
  -Handler mode is always PAL
  -CONTROL register is used to switch bewteen levels

Core Registers Cortext M
  -Core registers are emebeded within processor
  -r0 through r12 are general purpose regitsers
  -all core registers are 32 bit
  -r13 is stack pointer (sp)
    -used to track stack memory
    -psp and msp are part of stack pointer
    -which one is added is contigent on mode
  -r14 is link register (lr)
    -returns the infor for subroutines, system calls and exceptions
    -on reset, the processor sets the lr to 0xFFFFFFF
    -ex. two functions. Caller and callee (one fuctions calls the other)
    -when function2 is called in function1, jumps to address of function1.
      -once function1 is finished, jumps back to address of function1 called within function2
      -within assembly, this "jump" is showed with bl(branch with link)
      -under register tab in IDE, you can see the lr is updated at this point
        -after function finished in assembly, bx is updated with orignal address of caller
  -r15 is program counter(pc)
    -contains current prgram counter. On reset the processor loads the PC with the value of reset vector
    -holds the address of the next function to be called
  -Special Registers
    -5 specials registers, PSR, PRIMASK, FAULTMASK, BASEPRI, CONTROL respectively
    -PSR or program status register
      -contains APSR(apllication program status register), IPSR(interrupt program status register) and EPSR(execution program status register)
      -APSR contains all conditional flags like zero flags and negative flags etc. Bits 27 through 31, the rest of the bits are reservered
      -IPSR contains the exception type number for current routine
      -EPSR T bit set to one, the proccessor thinks the next program to be exectuted with ARM-Thumb interworking. 0 is ARM state

Memory mapped and non memory mapped registers
  -registors just mentioned are non memory mapped (no unique memory addresses)
  -register that have their own unique addresses are memory mapped
    -memory mapped has two types:registers for specific peripherals(NVIC, SCB, DEBUG) and specific register for microcontroller(TIMER< USB>)
    -every register is mapped

GCC inline assembly code
  -used to write pure assembly within C code
  -Assembly instruction: MOV r0, r1
    -syntax: _asm volatile("MOV, R0, R1");
  -ex.
    -ldr r0, [r1]  memory read
    -ldr r1, [r2]  
    -add r1, r0    memory modify
    -str r1, [r3]  memory write
    C would be
    -void fun_add(void)
    {
        _asm volatile("LDR R0, [R1]");
        _asm volatile("LDR R1, [R2]");
        _asm volatile("LDR R1, R0");
        _asm volatile("STR R1, [R3]");

        _asm volatile (
		"LDR r0,[r1]\n\t"
		"LDR r1, [r2]\n\t"
		"add r1, r0\n\t"
		"str r1, [r3]\n\t"
	);
        }
why would you use this?
	-moving c variable to assembler
	-mov C varible like CONTROL register to c varibale
	-must use volatile
Two types of operands
	-output and input
	-output first
	-ex ldr r0, [r1] r0 is output, r1 is input
	-::: at the end is clobber list. This specifc implies no clobber list
input and output operands
	-Constraint string = constraint character + constraint modifierm
	-move content of c varibale to ARM r0
	-__asm volatile ("mov r0,%0": : "r"(val));
		first mention ARM instruction 
		-then input operand
			-first "r" is a contraint string or a contraint character followed by value
			-if c value is 5, mov to %0
	-ex.
	-int val = 50;
	__asm volatile("mov r0,%0": :"r"(val));
	-contraint values:
		-r is general purpose 
		-I is immediate value
Special Registers
	-MRS move from special reg to reg (read)
	-MSR move from reg to special reg (write)
		-mrs reg, spec_reg
		__asm volatile("mrs %0,CONTROL" : "=r"(control_reg)::);
			-"=r" contraint character
		- =write only, + read only, &output only
Reset Sequence
	-when reset, processor is loaded with value of 0x0000_0000
	-the processor reads value @ memory location 0x0000_0000
	-msp = value@0x0000_0000
	-msp is a main stack pointer register
	-processor first initializes main stack pointer
	-after that the processor reads the value @ mem location 0x0000_0004
		-this value is the actual address of the reset handler
	-pc jumps to reset handler
	-reset handler is just a C or assembly function written by programmer to carry out any intitalization req
	-from reset handler you call main function
	-ex. Reset 0x00000000, then reset at 0x00000004 then to first instruction 0x20001000, then main function
	-reset handler in startup file
	-processor reset->initialize data, initialize bss, initalize C stdlib->main
	
Switching between access levels
	-to change access level set nPRIV (bit 0) to 0 for priviledge, and 1 for unprivileged in CONTROL reg
		-core register is not a memory map, so no pointers. only assembly
		-read first then modify. MRS first to read
			-read in with MRS r0, CONTROL
			-set CONTROL bit 0 to 1
			-load CONTROL is special register with msr
	-use case
	-realt time application and kernel
	-before running user task, kernel can change to unpriviledged
	-How to switch back?
		-you can not go from unvprivliedged to priviledged
		-you must trigger an interrupt to switch from thread mode back to handler mode
		-enter into isr and modify control register to 0
T bit and EPSR
	-T bit decdies which state the processor is in, wether thumb or arm
	-various arm processors support ARM-THUMB interworking, which means the ability to swtich between arm and 
		thumb
	-processor must be in ARM state to execute intructions which are from arm isa and vice versa for thumb
	-if T bit of the epsr is set(1), processor thinks that the next instruction is from THUMB isa
	-if epsr is set(0) then processor thinks that the next instruction is from ARM
	-cortex doesnt support the ARM state, hence T bit value is always 1.Failure off this will result in
	"Usage Fault" exception
	-the lsb (bit 0) of the prgram counter(PC) is linked to T bit
		-when you load value of address in to PC the bit[0] of that value or address is loaded into the T bit
	-which means any value in pc must have 0 bit as 1
	-always initialize address with OR 0x01 just to be safe
	-pure C program compilers will catch this, which is why address will be slightly different
	-this is the reason why you see all vecotr addresses are incremented by 1 in vector table
Memory Mapped Address
	-System bus(AHB) connect processor, GPIOD, TIMER, data memory ADC, Code Memroy and I2C
		-code memory is place where you keep instructions
		-data memory is where you store temporary data
	-bus is 32 bits
	-0x000000 through 0xFFFFFFFF
	-Code Region
		-512mb of code memory
	-SRAM region
		-512mb after code region
		-temporary data
	-Peripheral Region
		-512mb
		-first 1mb is addresssable if the optional bit-band feature is included
		-this is an execute never(VN) region
	-External Ram
		-if more ram is needed
	-Private Peripheral Bus Region
Bus Protocols and Bus Interfaces
	-in cortex Mx processors are based on bus architecture (AMBA)
	-supports AHB lite and APB
	-AHB(AMBA High-Performace Bus)is mainly used for the main bus high speed communication
	-APB(AMBA Peripheral Bus)PPB private peripheral using ahb-apb bridge
	-flash == code memory
	-PPB or private peripheral Bus icludes Timer and most Peripherals. This is an XN
	-
